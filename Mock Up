import streamlit as st
import networkx as nx
from pyvis.network import Network
import streamlit.components.v1 as components
import tempfile
import os

# Define the mock data with clear dependencies
systems_data = {
    "SYS1001": {
        "System_Name": "Payment Gateway System",
        "System_Description": "Core payment processing system",
        "System_Status": "Active",
        "Agency": "MOF",
        "Security_Classification": "Restricted",
        "Sensitivity_Classification": "Sensitive High",
        "System_Criticality": "High",
        "Computed_RML": "L2",
        "Service_Availability": "99.999%",
        "RTO": "4 hours",
        "RPO": "15 mins",
        "Dependencies": {
            "Upstream": [
                {
                    "System_ID": "SYS1002",
                    "Dependency_Type": "Service",
                    "Data_Exchange_Frequency": "Real-time",
                    "Dependency_Status": "Active",
                    "Dependency_Description": "Requires authentication services"
                }
            ],
            "Downstream": [
                {
                    "System_ID": "SYS1003",
                    "Dependency_Type": "Service",
                    "Data_Exchange_Frequency": "Real-time",
                    "Dependency_Status": "Active",
                    "Dependency_Description": "Provides payment processing services"
                },
                {
                    "System_ID": "SYS1004",
                    "Dependency_Type": "Service",
                    "Data_Exchange_Frequency": "Daily",
                    "Dependency_Status": "Active",
                    "Dependency_Description": "Provides transaction reports"
                }
            ]
        }
    },
    "SYS1002": {
        "System_Name": "User Authentication System",
        "System_Description": "Central authentication service",
        "System_Status": "Active",
        "Agency": "GovTech",
        "Security_Classification": "Restricted",
        "Sensitivity_Classification": "Sensitive High",
        "System_Criticality": "Critical",
        "Computed_RML": "L3",
        "Service_Availability": "99.999%",
        "RTO": "2 hours",
        "RPO": "5 mins",
        "Dependencies": {
            "Upstream": [],  # No upstream dependencies
            "Downstream": [
                {
                    "System_ID": "SYS1001",
                    "Dependency_Type": "Service",
                    "Data_Exchange_Frequency": "Real-time",
                    "Dependency_Status": "Active",
                    "Dependency_Description": "Provides authentication services"
                },
                {
                    "System_ID": "SYS1003",
                    "Dependency_Type": "Service",
                    "Data_Exchange_Frequency": "Real-time",
                    "Dependency_Status": "Active",
                    "Dependency_Description": "Provides authentication services"
                }
            ]
        }
    }
}

def create_dependency_network(systems_data):
    # Create NetworkX graph
    G = nx.DiGraph()
    
    # Color mapping based on criticality
    color_map = {
        "Critical": "#FF0000",
        "High": "#FFA500",
        "Medium": "#FFFF00",
        "Low": "#90EE90"
    }
    
    # Add all systems as nodes (including referenced systems that aren't fully detailed)
    all_systems = set()
    for sys_id, sys_info in systems_data.items():
        all_systems.add(sys_id)
        for dep in sys_info["Dependencies"]["Upstream"]:
            all_systems.add(dep["System_ID"])
        for dep in sys_info["Dependencies"]["Downstream"]:
            all_systems.add(dep["System_ID"])
    
    # Add nodes
    for sys_id in all_systems:
        if sys_id in systems_data:
            # Detailed system info available
            sys_info = systems_data[sys_id]
            node_color = color_map.get(sys_info["System_Criticality"], "#808080")
            tooltip = f"""
            System: {sys_info['System_Name']}
            Description: {sys_info['System_Description']}
            Agency: {sys_info['Agency']}
            Criticality: {sys_info['System_Criticality']}
            RML: {sys_info['Computed_RML']}
            Availability: {sys_info['Service_Availability']}
            RTO: {sys_info['RTO']}
            RPO: {sys_info['RPO']}
            """
            G.add_node(sys_id, 
                      title=tooltip,
                      color=node_color,
                      label=sys_info['System_Name'])
        else:
            # Referenced system without details
            G.add_node(sys_id,
                      title=f"System ID: {sys_id}\n(Referenced System)",
                      color="#808080",
                      label=f"System {sys_id}")
    
    # Add edges
    for sys_id, sys_info in systems_data.items():
        # Add upstream dependencies
        for dep in sys_info["Dependencies"]["Upstream"]:
            G.add_edge(dep["System_ID"], 
                      sys_id,
                      title=f"""
                      Type: {dep['Dependency_Type']}
                      Frequency: {dep['Data_Exchange_Frequency']}
                      Status: {dep['Dependency_Status']}
                      Description: {dep['Dependency_Description']}
                      """,
                      arrows="to",
                      color="#2E7D32")
    
    # Create PyVis network
    net = Network(height="600px", width="100%", directed=True, notebook=True)
    
    # Transfer the NetworkX graph to PyVis
    net.from_nx(G)
    
    # Set options for better visualization
    net.set_options("""
    {
        "physics": {
            "enabled": true,
            "forceAtlas2Based": {
                "gravitationalConstant": -50,
                "centralGravity": 0.01,
                "springLength": 200,
                "springConstant": 0.08
            },
            "maxVelocity": 50,
            "solver": "forceAtlas2Based",
            "timestep": 0.35,
            "stabilization": {"iterations": 150}
        },
        "edges": {
            "smooth": {
                "type": "continuous",
                "forceDirection": "none"
            },
            "color": {"inherit": false},
            "width": 2,
            "arrows": {
                "to": {
                    "enabled": true,
                    "scaleFactor": 0.5
                }
            }
        },
        "nodes": {
            "font": {
                "size": 14,
                "face": "arial"
            },
            "borderWidth": 2,
            "borderWidthSelected": 4,
            "size": 30
        },
        "interaction": {
            "hover": true,
            "tooltipDelay": 200
        }
    }
    """)
    
    return net

# Streamlit app
st.set_page_config(page_title="System Dependencies Visualization", layout="wide")

st.title("System Dependencies Visualization")

# Create tabs for different views
tab1, tab2 = st.tabs(["Network Visualization", "System Details"])

with tab1:
    st.subheader("System Dependency Network")
    
    # Create and display network visualization
    net = create_dependency_network(systems_data)
    
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.html') as tmp_file:
            net.save_graph(tmp_file.name)
            with open(tmp_file.name, 'r', encoding='utf-8') as f:
                html_content = f.read()
            
            # Add fullscreen button
            fullscreen_html = """
            <button 
                style="
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 10000;
                    padding: 8px 16px;
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                    font-family: Arial, sans-serif;
                    font-size: 14px;
                "
                onclick="toggleFullscreen()"
            >
                Full Screen
            </button>
            <script>
                function toggleFullscreen() {
                    let elem = document.documentElement;
                    if (!document.fullscreenElement) {
                        if (elem.requestFullscreen) {
                            elem.requestFullscreen();
                        } else if (elem.webkitRequestFullscreen) {
                            elem.webkitRequestFullscreen();
                        } else if (elem.msRequestFullscreen) {
                            elem.msRequestFullscreen();
                        }
                    } else {
                        if (document.exitFullscreen) {
                            document.exitFullscreen();
                        } else if (document.webkitExitFullscreen) {
                            document.webkitExitFullscreen();
                        } else if (document.msExitFullscreen) {
                            document.msExitFullscreen();
                        }
                    }
                }
            </script>
            """
            
            modified_html = html_content.replace('</body>', f'{fullscreen_html}</body>')
            components.html(modified_html, height=600)
            os.unlink(tmp_file.name)
    except Exception as e:
        st.error(f"An error occurred while generating the graph: {str(e)}")

    st.markdown("""
    **Legend:**
    - Red nodes: Critical systems
    - Orange nodes: High criticality systems
    - Gray nodes: Referenced systems (details not available)
    - Arrows indicate dependency direction (points from provider to dependent)
    """)

with tab2:
    st.subheader("Detailed System Information")
    
    # Display detailed system information
    for sys_id, sys_info in systems_data.items():
        with st.expander(f"{sys_info['System_Name']} ({sys_id})"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Basic Information**")
                st.write(f"Description: {sys_info['System_Description']}")
                st.write(f"Agency: {sys_info['Agency']}")
                st.write(f"Status: {sys_info['System_Status']}")
                
                st.markdown("**Classification**")
                st.write(f"Security: {sys_info['Security_Classification']}")
                st.write(f"Sensitivity: {sys_info['Sensitivity_Classification']}")
                st.write(f"Criticality: {sys_info['System_Criticality']}")
                st.write(f"RML: {sys_info['Computed_RML']}")
            
            with col2:
                st.markdown("**Availability Metrics**")
                st.write(f"Service Availability: {sys_info['Service_Availability']}")
                st.write(f"RTO: {sys_info['RTO']}")
                st.write(f"RPO: {sys_info['RPO']}")
                
                st.markdown("**Dependencies**")
                if sys_info['Dependencies']['Upstream']:
                    st.write("Upstream:")
                    for dep in sys_info['Dependencies']['Upstream']:
                        st.write(f"- {dep['System_ID']}: {dep['Dependency_Description']}")
                else:
                    st.write("No upstream dependencies")
                
                if sys_info['Dependencies']['Downstream']:
                    st.write("Downstream:")
                    for dep in sys_info['Dependencies']['Downstream']:
                        st.write(f"- {dep['System_ID']}: {dep['Dependency_Description']}")
